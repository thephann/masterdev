/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package src.main.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class student extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"student\",\"namespace\":\"src.main.avro\",\"fields\":[{\"name\":\"id\",\"type\":[\"int\",\"null\"]},{\"name\":\"fname\",\"type\":\"string\"},{\"name\":\"lname\",\"type\":\"string\"},{\"name\":\"age\",\"type\":\"int\"},{\"name\":\"gender\",\"type\":{\"type\":\"enum\",\"name\":\"Gender\",\"symbols\":[\"male\",\"female\"]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.Integer id;
  @Deprecated public java.lang.CharSequence fname;
  @Deprecated public java.lang.CharSequence lname;
  @Deprecated public int age;
  @Deprecated public src.main.avro.Gender gender;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public student() {}

  /**
   * All-args constructor.
   */
  public student(java.lang.Integer id, java.lang.CharSequence fname, java.lang.CharSequence lname, java.lang.Integer age, src.main.avro.Gender gender) {
    this.id = id;
    this.fname = fname;
    this.lname = lname;
    this.age = age;
    this.gender = gender;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return fname;
    case 2: return lname;
    case 3: return age;
    case 4: return gender;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.Integer)value$; break;
    case 1: fname = (java.lang.CharSequence)value$; break;
    case 2: lname = (java.lang.CharSequence)value$; break;
    case 3: age = (java.lang.Integer)value$; break;
    case 4: gender = (src.main.avro.Gender)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   */
  public java.lang.Integer getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.Integer value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'fname' field.
   */
  public java.lang.CharSequence getFname() {
    return fname;
  }

  /**
   * Sets the value of the 'fname' field.
   * @param value the value to set.
   */
  public void setFname(java.lang.CharSequence value) {
    this.fname = value;
  }

  /**
   * Gets the value of the 'lname' field.
   */
  public java.lang.CharSequence getLname() {
    return lname;
  }

  /**
   * Sets the value of the 'lname' field.
   * @param value the value to set.
   */
  public void setLname(java.lang.CharSequence value) {
    this.lname = value;
  }

  /**
   * Gets the value of the 'age' field.
   */
  public java.lang.Integer getAge() {
    return age;
  }

  /**
   * Sets the value of the 'age' field.
   * @param value the value to set.
   */
  public void setAge(java.lang.Integer value) {
    this.age = value;
  }

  /**
   * Gets the value of the 'gender' field.
   */
  public src.main.avro.Gender getGender() {
    return gender;
  }

  /**
   * Sets the value of the 'gender' field.
   * @param value the value to set.
   */
  public void setGender(src.main.avro.Gender value) {
    this.gender = value;
  }

  /** Creates a new student RecordBuilder */
  public static src.main.avro.student.Builder newBuilder() {
    return new src.main.avro.student.Builder();
  }
  
  /** Creates a new student RecordBuilder by copying an existing Builder */
  public static src.main.avro.student.Builder newBuilder(src.main.avro.student.Builder other) {
    return new src.main.avro.student.Builder(other);
  }
  
  /** Creates a new student RecordBuilder by copying an existing student instance */
  public static src.main.avro.student.Builder newBuilder(src.main.avro.student other) {
    return new src.main.avro.student.Builder(other);
  }
  
  /**
   * RecordBuilder for student instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<student>
    implements org.apache.avro.data.RecordBuilder<student> {

    private java.lang.Integer id;
    private java.lang.CharSequence fname;
    private java.lang.CharSequence lname;
    private int age;
    private src.main.avro.Gender gender;

    /** Creates a new Builder */
    private Builder() {
      super(src.main.avro.student.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(src.main.avro.student.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.fname)) {
        this.fname = data().deepCopy(fields()[1].schema(), other.fname);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.lname)) {
        this.lname = data().deepCopy(fields()[2].schema(), other.lname);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.age)) {
        this.age = data().deepCopy(fields()[3].schema(), other.age);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.gender)) {
        this.gender = data().deepCopy(fields()[4].schema(), other.gender);
        fieldSetFlags()[4] = true;
      }
    }
    
    /** Creates a Builder by copying an existing student instance */
    private Builder(src.main.avro.student other) {
            super(src.main.avro.student.SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.fname)) {
        this.fname = data().deepCopy(fields()[1].schema(), other.fname);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.lname)) {
        this.lname = data().deepCopy(fields()[2].schema(), other.lname);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.age)) {
        this.age = data().deepCopy(fields()[3].schema(), other.age);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.gender)) {
        this.gender = data().deepCopy(fields()[4].schema(), other.gender);
        fieldSetFlags()[4] = true;
      }
    }

    /** Gets the value of the 'id' field */
    public java.lang.Integer getId() {
      return id;
    }
    
    /** Sets the value of the 'id' field */
    public src.main.avro.student.Builder setId(java.lang.Integer value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'id' field has been set */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'id' field */
    public src.main.avro.student.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'fname' field */
    public java.lang.CharSequence getFname() {
      return fname;
    }
    
    /** Sets the value of the 'fname' field */
    public src.main.avro.student.Builder setFname(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.fname = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'fname' field has been set */
    public boolean hasFname() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'fname' field */
    public src.main.avro.student.Builder clearFname() {
      fname = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'lname' field */
    public java.lang.CharSequence getLname() {
      return lname;
    }
    
    /** Sets the value of the 'lname' field */
    public src.main.avro.student.Builder setLname(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.lname = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'lname' field has been set */
    public boolean hasLname() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'lname' field */
    public src.main.avro.student.Builder clearLname() {
      lname = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'age' field */
    public java.lang.Integer getAge() {
      return age;
    }
    
    /** Sets the value of the 'age' field */
    public src.main.avro.student.Builder setAge(int value) {
      validate(fields()[3], value);
      this.age = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'age' field has been set */
    public boolean hasAge() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'age' field */
    public src.main.avro.student.Builder clearAge() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'gender' field */
    public src.main.avro.Gender getGender() {
      return gender;
    }
    
    /** Sets the value of the 'gender' field */
    public src.main.avro.student.Builder setGender(src.main.avro.Gender value) {
      validate(fields()[4], value);
      this.gender = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'gender' field has been set */
    public boolean hasGender() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'gender' field */
    public src.main.avro.student.Builder clearGender() {
      gender = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    public student build() {
      try {
        student record = new student();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Integer) defaultValue(fields()[0]);
        record.fname = fieldSetFlags()[1] ? this.fname : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.lname = fieldSetFlags()[2] ? this.lname : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.age = fieldSetFlags()[3] ? this.age : (java.lang.Integer) defaultValue(fields()[3]);
        record.gender = fieldSetFlags()[4] ? this.gender : (src.main.avro.Gender) defaultValue(fields()[4]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package src.main.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class universities extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"universities\",\"namespace\":\"src.main.avro\",\"fields\":[{\"name\":\"uniName\",\"type\":\"string\"},{\"name\":\"numberOfStaffs\",\"type\":\"int\"},{\"name\":\"email\",\"type\":\"string\"},{\"name\":\"department\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"depart\",\"fields\":[{\"name\":\"DepartName\",\"type\":\"string\"},{\"name\":\"contact\",\"type\":\"string\"},{\"name\":\"programs\",\"type\":{\"type\":\"enum\",\"name\":\"Programs\",\"symbols\":[\"HighQuality\",\"Honors\"]}},{\"name\":\"numberOfStudents\",\"type\":\"int\"}]}}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence uniName;
  @Deprecated public int numberOfStaffs;
  @Deprecated public java.lang.CharSequence email;
  @Deprecated public java.util.List<src.main.avro.depart> department;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public universities() {}

  /**
   * All-args constructor.
   */
  public universities(java.lang.CharSequence uniName, java.lang.Integer numberOfStaffs, java.lang.CharSequence email, java.util.List<src.main.avro.depart> department) {
    this.uniName = uniName;
    this.numberOfStaffs = numberOfStaffs;
    this.email = email;
    this.department = department;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return uniName;
    case 1: return numberOfStaffs;
    case 2: return email;
    case 3: return department;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: uniName = (java.lang.CharSequence)value$; break;
    case 1: numberOfStaffs = (java.lang.Integer)value$; break;
    case 2: email = (java.lang.CharSequence)value$; break;
    case 3: department = (java.util.List<src.main.avro.depart>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'uniName' field.
   */
  public java.lang.CharSequence getUniName() {
    return uniName;
  }

  /**
   * Sets the value of the 'uniName' field.
   * @param value the value to set.
   */
  public void setUniName(java.lang.CharSequence value) {
    this.uniName = value;
  }

  /**
   * Gets the value of the 'numberOfStaffs' field.
   */
  public java.lang.Integer getNumberOfStaffs() {
    return numberOfStaffs;
  }

  /**
   * Sets the value of the 'numberOfStaffs' field.
   * @param value the value to set.
   */
  public void setNumberOfStaffs(java.lang.Integer value) {
    this.numberOfStaffs = value;
  }

  /**
   * Gets the value of the 'email' field.
   */
  public java.lang.CharSequence getEmail() {
    return email;
  }

  /**
   * Sets the value of the 'email' field.
   * @param value the value to set.
   */
  public void setEmail(java.lang.CharSequence value) {
    this.email = value;
  }

  /**
   * Gets the value of the 'department' field.
   */
  public java.util.List<src.main.avro.depart> getDepartment() {
    return department;
  }

  /**
   * Sets the value of the 'department' field.
   * @param value the value to set.
   */
  public void setDepartment(java.util.List<src.main.avro.depart> value) {
    this.department = value;
  }

  /** Creates a new universities RecordBuilder */
  public static src.main.avro.universities.Builder newBuilder() {
    return new src.main.avro.universities.Builder();
  }
  
  /** Creates a new universities RecordBuilder by copying an existing Builder */
  public static src.main.avro.universities.Builder newBuilder(src.main.avro.universities.Builder other) {
    return new src.main.avro.universities.Builder(other);
  }
  
  /** Creates a new universities RecordBuilder by copying an existing universities instance */
  public static src.main.avro.universities.Builder newBuilder(src.main.avro.universities other) {
    return new src.main.avro.universities.Builder(other);
  }
  
  /**
   * RecordBuilder for universities instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<universities>
    implements org.apache.avro.data.RecordBuilder<universities> {

    private java.lang.CharSequence uniName;
    private int numberOfStaffs;
    private java.lang.CharSequence email;
    private java.util.List<src.main.avro.depart> department;

    /** Creates a new Builder */
    private Builder() {
      super(src.main.avro.universities.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(src.main.avro.universities.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.uniName)) {
        this.uniName = data().deepCopy(fields()[0].schema(), other.uniName);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.numberOfStaffs)) {
        this.numberOfStaffs = data().deepCopy(fields()[1].schema(), other.numberOfStaffs);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.email)) {
        this.email = data().deepCopy(fields()[2].schema(), other.email);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.department)) {
        this.department = data().deepCopy(fields()[3].schema(), other.department);
        fieldSetFlags()[3] = true;
      }
    }
    
    /** Creates a Builder by copying an existing universities instance */
    private Builder(src.main.avro.universities other) {
            super(src.main.avro.universities.SCHEMA$);
      if (isValidValue(fields()[0], other.uniName)) {
        this.uniName = data().deepCopy(fields()[0].schema(), other.uniName);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.numberOfStaffs)) {
        this.numberOfStaffs = data().deepCopy(fields()[1].schema(), other.numberOfStaffs);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.email)) {
        this.email = data().deepCopy(fields()[2].schema(), other.email);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.department)) {
        this.department = data().deepCopy(fields()[3].schema(), other.department);
        fieldSetFlags()[3] = true;
      }
    }

    /** Gets the value of the 'uniName' field */
    public java.lang.CharSequence getUniName() {
      return uniName;
    }
    
    /** Sets the value of the 'uniName' field */
    public src.main.avro.universities.Builder setUniName(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.uniName = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'uniName' field has been set */
    public boolean hasUniName() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'uniName' field */
    public src.main.avro.universities.Builder clearUniName() {
      uniName = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'numberOfStaffs' field */
    public java.lang.Integer getNumberOfStaffs() {
      return numberOfStaffs;
    }
    
    /** Sets the value of the 'numberOfStaffs' field */
    public src.main.avro.universities.Builder setNumberOfStaffs(int value) {
      validate(fields()[1], value);
      this.numberOfStaffs = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'numberOfStaffs' field has been set */
    public boolean hasNumberOfStaffs() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'numberOfStaffs' field */
    public src.main.avro.universities.Builder clearNumberOfStaffs() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'email' field */
    public java.lang.CharSequence getEmail() {
      return email;
    }
    
    /** Sets the value of the 'email' field */
    public src.main.avro.universities.Builder setEmail(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.email = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'email' field has been set */
    public boolean hasEmail() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'email' field */
    public src.main.avro.universities.Builder clearEmail() {
      email = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'department' field */
    public java.util.List<src.main.avro.depart> getDepartment() {
      return department;
    }
    
    /** Sets the value of the 'department' field */
    public src.main.avro.universities.Builder setDepartment(java.util.List<src.main.avro.depart> value) {
      validate(fields()[3], value);
      this.department = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'department' field has been set */
    public boolean hasDepartment() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'department' field */
    public src.main.avro.universities.Builder clearDepartment() {
      department = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public universities build() {
      try {
        universities record = new universities();
        record.uniName = fieldSetFlags()[0] ? this.uniName : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.numberOfStaffs = fieldSetFlags()[1] ? this.numberOfStaffs : (java.lang.Integer) defaultValue(fields()[1]);
        record.email = fieldSetFlags()[2] ? this.email : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.department = fieldSetFlags()[3] ? this.department : (java.util.List<src.main.avro.depart>) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
